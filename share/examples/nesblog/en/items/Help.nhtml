<h2><a name="NAME" href="#___top" title="click to go to top of document" class="u">NAME</a></h2>

<p>Nes - The ultimate template system for HTML,
the Web and Perl</p>

<h2><a name="SYNOPSIS" href="#___top" title="click to go to top of document" class="u">SYNOPSIS</a></h2>

<pre>    use Nes;
    my $nes = Nes::Singleton-&#62;new(&#39;template.nhtml&#39;);

    my $nes_tags = {};
    $nes_tags-&#62;{&#39;var_hello&#39;} = &#39;Hello World!&#39;;

    $nes-&#62;out(%$nes_tag);</pre>

<h2><a name="DESCRIPTION" href="#___top" title="click to go to top of document" class="u">DESCRIPTION</a></h2>

<p>Nes (No Embedded Source) a system for separating Perl executable code and the representation of the data generated in HTML using Tags are replaced with variables created in Perl.</p>

<p>Nes can do for you? With Nes can do the same or more than any other template system, only much faster and easier. The time is the most valuable resource.</p>

<p>With Nes you can NOT:</p>

<p>- Embed Perl code in the template.</p>

<p>- Modify aplication data from the template.</p>

<p>- Emulating an interpreter or language in the template.</p>

<p>To do these things, there is already a system called PHP. :-)</p>

<p>Nes Callback:</p>

<pre>    .----------------------------------------------.
    |                 | Nes Object |               |
    |                 &#39;------------&#39;               |
    | .-------------------.    .-----------------. |
    | |  template.nhtml   |    |    script.pl    | |
    | |-------------------|    |-----------------| |
    | |        _          |---&#62;|    _       _    | |
    | |        |          |&#60;---|    |       |    | |
    | &#39;--------|----------&#39;    &#39;----|-------|----&#39; |
    &#39;----------|--------------------|-------|------&#39;

               |                    |       |
               |                    |       &#39;------------------.
               |                    |                          |
               v                    v                          v
    .----------------------.  .-----------------------.  .------------.
    |                      |  |                       |  |            |
    |  Nes Object Library  |  |  My App Perl Library  |  |    CPAN    |
    |                      |  |                       |  |            |
    &#39;----------------------&#39;  &#39;-----------------------&#39;  &#39;------------&#39;</pre>

<p>Nes Data Flow:</p>

<pre>    .------------.        .-----------------------.
    |            |        |                       |
    |    DATA    |-------&#62;|  My App Perl Library  |
    |            |        |                       |
    &#39;------------&#39;        &#39;-----------------------&#39;

           |                                |
           &#39;--------------------------.     |
    .---------------------------------|-----|-----.
    |                | Nes Object |   |     |     |
    |                &#39;------------&#39;   v     v     |
    | .------------------.    .-----------------. |
    | |  template.nhtml  |&#60;---|    script.pl    | |
    | &#39;------------------&#39;    &#39;-----------------&#39; |
    &#39;----------|----------------------------------&#39;
               v
    .---------------------.
    |         OUT         |
    &#39;---------------------&#39;</pre>

<h3><a name="Some_Nes_features" href="#___top" title="click to go to top of document" class="u">Some Nes features</a></h3>


<dt><a name="Simplicity">Simplicity</a></dt>

<dd>
<p>Nes has only ten Tags to include in the HTML, and a single object with a single method to instantiate in Perl. You can start working with Nes in hours, not weeks or months as in other systems.</p>

<dt><a name="Security">Security</a></dt>

<dd>
<p>Transparent management of code injection and cross-site scripting. Plugins for creating secure forms, Forms and Captcha.</p>

<p>Live sample: <a href="http://nes.sourceforge.net/miniblog/en/?action=login" class="podlinkurl">http://nes.sourceforge.net/miniblog/en/?action=login</a></p>

<dt><a name="Objects">Objects</a></dt>

<dd>
<p>Object-oriented paradigm which enables you to reuse your code or use third-party libraries. Objects are the main feature that makes Nes different from other systems.</p>

<dt><a name="Debugger">Debugger</a></dt>

<dd>
<p>Full Debug for templates, customizable through templates Nes.</p>

<p>Live sample: <a href="http://nes.sourceforge.net/hello_nes/tests/?action=others" class="podlinkurl">http://nes.sourceforge.net/hello_nes/tests/?action=others</a></p>

<dt><a name="HTML_oriented">HTML oriented</a></dt>

<dd>
<p>Nes is oriented at HTML and not the Perl code. Nes exported very few Perl functions, also to simplify, Nes Objects may also contain HTML, Javascript, CSS, Ajax, etc.. even PHP, or trail mix.</p>

<dt><a name="Wrapper">Wrapper</a></dt>

<dd>
<p>Full support of PHP Wrapper. Nes as Wrapper can use to add functionality to other types as HTML, or PHP to exchange information.</p>

<dt><a name="ModPerl">ModPerl</a></dt>

<dd>
<p>Support for mod_perl.</p>

<dt><a name="Sessions">Sessions</a></dt>

<dd>
<p>Creating and managing user sessions.</p>

<dt><a name="Plugins">Plugins</a></dt>

<dd>
<p>You can add functionality using plugins to Nes, you can create your own or use by third parties.</p>

<dt><a name="PHP_and_other">PHP and other</a></dt>

<dd>
<p>Insert parts of PHP code in Nes only have to type a tag, Nes allow the inclusion in your script templates in other languages other than Perl without writing a single line of Perl code. Moreover, most of them can contain Tags Nes.</p>

<p>Live sample: <a href="http://nes.sourceforge.net/miniblog/en/?action=item&amp;item=Include%20PHP%20and%20others" class="podlinkurl">http://nes.sourceforge.net/miniblog/en/?action=item&#38;item=Include%20PHP%20and%20others</a></p>

<dt><a name="SQL">SQL</a></dt>

<dd>
<p>You can insert SQL SELECT statements in your templates directly.</p>

<dt><a name=".nes.cfg_configuration_files">.nes.cfg configuration files</a></dt>

<dd>
<p>Nes provides configuration files per directory.</p>
</dd>


<h3><a name="Nes_Perl_script_Sample" href="#___top" title="click to go to top of document" class="u">Nes Perl script Sample</a></h3>

<pre>    use Nes;
    my = Nes::Singleton-&#62;new(&#39;template.nhtml&#39;);

    my $nes_tags = {};
    $nes_tags-&#62;{&#39;var_hello&#39;} = &#39;Hello World!&#39;;

    $nes-&#62;out(%$nes_tag);  </pre>

<h3><a name="Nes_template_Sample" href="#___top" title="click to go to top of document" class="u">Nes template Sample</a></h3>

<pre>    &#123;: NES 1.0 (&#39;hello.cgi&#39;) :&#125;
    &#60;html&#62;
      &#60;head&#62;
        &#60;title&#62;Nes Hello World&#60;/title&#62;
      &#60;/head&#62;

      &#60;body&#62;
        &#60;b&#62;&#123;: $ var_hello :&#125;&#60;/b&#62;
      &#60;/body&#62;
    &#60;/html&#62;</pre>

<h3><a name="More_samples" href="#___top" title="click to go to top of document" class="u">More samples</a></h3>

<p>See <a href="http://search.cpan.org/perldoc?Nes%3A%3ATutorial" class="podlinkpod">Nes::Tutorial</a></p>

<p>Sample to use Nes; <a href="http://nes.sourceforge.net/" class="podlinkurl">http://nes.sourceforge.net/</a></p>

<h2><a name="CONFIGURATION" href="#___top" title="click to go to top of document" class="u">CONFIGURATION</a></h2>

<p>Nes requires configuration of you cgi-bin and .htaccess for directory of the Nes templates.</p>

<p>To active and configure Nes use utility: set_nes_site</p>

<h3><a name="Configured" href="#___top" title="click to go to top of document" class="u">Configured</a></h3>

<p>Active Nes in /usr/lib/cgi-bin:</p>

<pre>    set_nes_site --cgi_dir=/usr/lib/cgi-bin</pre>

<p>Configure Nes for directory /var/www/myweb:</p>

<pre>    set_nes_site --dir_cfg=/var/www/myweb</pre>

<p>Configure Nes for all site:</p>

<pre>    set_nes_site --dir_cfg=/var/www  </pre>

<p>Install hello world and test examples in /var/www/test_nes:</p>

<pre>    set_nes_site --from_exam=hello_nes --to_exam=/var/www/test_nes</pre>

<p>More help:</p>

<pre>    set_nes_site --help</pre>

<p>* Change /usr/lib/cgi-bin and /var/www for you particular path</p>

<h3><a name="Configured_locally" href="#___top" title="click to go to top of document" class="u">Configured locally</a></h3>

<p>For configured Nes locally find you path to Nes.pm and add in iprefix in cgi_dir and from_exam options.</p>

<p>Active Nes in /usr/lib/cgi-bin:</p>

<pre>    set_nes_site --cgi_dir=/usr/lib/cgi-bin --iprefix=/home/USER/path-to-Nes</pre>

<p>More help:</p>

<pre>    set_nes_site --help    </pre>

<p>* Change /usr/lib/cgi-bin and /home/USER/path-to-Nes for you particular path</p>

<h3><a name="Nes_templates_.htaccess_configuration" href="#___top" title="click to go to top of document" class="u">Nes templates .htaccess configuration</a></h3>

<p>cgi_dir option of the set_nes_site utility, create a file like this:</p>

<pre>    # ---------- Nes configuration --------------
    # exec cgis
    Options +ExecCGI
    AddHandler cgi-script .cgi .pl

    # Nes nhtml files
    AddHandler perl-nes .nhtml
    AddHandler perl-nes .nhtm

    # nes dispatcher
    Action perl-nes /cgi-bin/nes/dispatch.cgi

    # protected Nes configuration and other files
    &#60;FilesMatch \.(nsql|nes.cfg)$&#62;
      order deny,allow
      deny from all
    &#60;/FilesMatch&#62;
    #---------------------------------------------</pre>

<h2><a name="HTML_oriented" href="#___top" title="click to go to top of document" class="u">HTML oriented</a></h2>

<p>Usually the procedure for using a template would be:</p>

<pre>    Template-&#62;new(&#39;template&#39;);</pre>

<p>The Perl script calls the template.</p>

<p>In Nes, template calls to Perl script:</p>

<pre>    &#123;: NES 1.0 (&#39;script.pl&#39;) :&#125;
    &#60;html&#62;
    ...</pre>

<p>Usually the procedure for output a template would be:</p>

<pre>    Template-&#62;out;</pre>

<p>The Perl script handles the output.</p>

<p>In Nes, template handles the output.</p>

<p>Usually must call many methods to manage the template.</p>

<p>In Nes, no need to call more than one or two methods, and in many cases none:</p>

<pre>    &#123;: NES 1.0 none :&#125;
    { # no Perl script requires :&#125;
    &#60;html&#62;

    ...</pre>

<h2><a name="Very_easy_to_use" href="#___top" title="click to go to top of document" class="u">Very easy to use</a></h2>

<p>Extremely simple, in most cases you just need to do this:</p>

<pre>    use Nes;
    my $nes = Nes::Singleton-&#62;new(&#39;template.nhtml&#39;);
    my %tags;

    # the things that make your script...
    ...

    # set variables for output
    $tags{&#39;var_hello&#39;} = &#39;Hello World!&#39;;

    # the things that make your script...
    ...

    # send variables to Nes
    $nes-&#62;out(%$nes_tag);</pre>

<p>And in case you want to use user session?</p>

<p>Too. Only in special cases need access Nes::Singleton, consider this example:</p>

<pre>    &#123;: NES 1.0 (&#39;index.cgi&#39;) :&#125;
    &#60;html&#62;
        ...
        &#123;: ~ ( ! *nes_session_ok )
            &#123;: include (&#39;user_register.nhtml&#39;) :&#125;
        :&#125;
        ...
    &#60;/html&#62;</pre>

<p>The perl script required is:</p>

<pre>    none! :-) easy?</pre>

<p>For this case we can rewrite the template as follows:</p>

<pre>    &#123;: NES 1.0 none :&#125;
    &#60;html&#62;
        ...
        &#123;: ~ ( ! *nes_session_ok )
            &#123;: include (&#39;user_register.nhtml&#39;) :&#125;
        :&#125;
        ...
    &#60;/html&#62;</pre>

<p>So to create the session:</p>

<pre>    &#123;: NES 1.0 none :&#125;
    &#60;html&#62;
        ...
        &#123;: ~ ( $login_ok )
          &#123;: include ( &#39;&#123;: * cfg_obj_top_dir :&#125;/session.nhtml&#39;,
                       &#39;create&#39;,  
                       &#39;&#123;: * q_user :&#125;&#39;,
                       &#39;30m&#39;

                     )
          :&#125;
        :&#125;
        ...
    &#60;/html&#62;</pre>

<p>* In this example we assumed that there is a form that gives value &#123;: * q_user :&#125; or/and an object that defines Nes &#123;: $ login_ok :&#125;</p>

<p>Nes is oriented at HTML and not the Perl code.</p>

<p>See: <a href="http://search.cpan.org/perldoc?Nes%3A%3ASingleton" class="podlinkpod">Nes::Singleton</a></p>

<h2><a name="Syntax_Nes" href="#___top" title="click to go to top of document" class="u">Syntax Nes</a></h2>

<h3><a name="Blocks" href="#___top" title="click to go to top of document" class="u">Blocks</a></h3>

<p>Nes instructions consist of blocks enclosed in braces, the keys to open and close a block are respectively:</p>

<pre>    &#123;: and :&#125;</pre>

<h3><a name="Tags" href="#___top" title="click to go to top of document" class="u">Tags</a></h3>

<p>The Tags are the word or symbol that precedes the keys to open the block. Similar to the HTML Tags. The Tag Nes syntax is:</p>

<pre>    &#123;: TAG [(parameters)] [HTML] :&#125;</pre>

<p>TAG can be:</p>

<pre>    #       Comment
    $       Variable
    *       Environment variable
    ~       Expression
    sql     SQL SELECT
    @       Data table
    @$      Field in a data table
    include include a file
    NES     Nes
    &#38;       Plugin</pre>

<h3><a name="Syntax" href="#___top" title="click to go to top of document" class="u">Syntax</a></h3>

<p>It allows abbreviated as follows:</p>

<pre>    &#123;: $ ( &#39;variable&#39; ) :&#125;
    &#123;: $ ( variable ) :&#125;
    &#123;: $ variable :&#125;
    &#123;: $variable :&#125;</pre>

<p>The four forms have the same meaning.</p>

<p>Parentheses are not required provided there are no spaces between the parameters:</p>

<pre>    &#123;: ~ $variable &#60;p&#62; HTML code &#60;/p&#62; :&#125;                   &#60;- * unnecessary 
    &#123;: ~ ($ variable1 == $ variable2) &#60;p&#62; HTML code &#60;/p&#62; :&#125; &#60;- * required </pre>

<p>Use quotation marks and commas in the parameters:</p>

<pre>    &#123;: include (&#39;template.nhtml&#39;,
                &#39;The \&#39;Title\&#39;&#39;,
                &#39;one, two and three&#39;
               ) 
    :&#125;

    &#123;: include (&#39;&#123;: * cfg_obj_top_dir :&#125;/Nes/form/secure_login.nhtml&#39;,
                &#34;

                  script_handler   =&#62; &#39;my_script_handler.pl&#39;,
                  function_handler =&#62; &#39;my_function_handler&#39;,
                  form_name        =&#62; &#39;my_form_1&#39;,
                &#34;
               )         
    :&#125;    </pre>

<p>All Tags except NES may occupy several lines:</p>

<pre>    &#123;: #
        If variable returns true 
        you see &#34;HTML code&#34;
    :&#125;
    &#123;: ~ ( $ variable ) 
            &#60;p&#62;HTML code&#60;/p&#62;
    :&#125;</pre>

<h2><a name="TAGS" href="#___top" title="click to go to top of document" class="u">TAGS</a></h2>

<h3><a name="#_Comment" href="#___top" title="click to go to top of document" class="u"># Comment</a></h3>

<pre>    &#123;: # comment :&#125;</pre>

<p>Block is removed and not displayed in the HTML output.</p>

<pre>    &#123;: NES 1.0 none :&#125;
    &#60;html&#62;
      &#60;head&#62;

        &#60;title&#62;Nes sample&#60;/title&#62;
      &#60;/head&#62;
      &#60;body&#62;
        &#123;: # this is a comment :&#125;
      &#60;/body&#62;
    &#60;/html&#62;</pre>

<h3><a name="$_Variable" href="#___top" title="click to go to top of document" class="u">$ Variable</a></h3>

<pre>    &#123;: $ variable :&#125;</pre>

<p>The block is replaced by the value of &#34;variable&#34; that must have been previously defined in our Perl script, of not being the block is replaced by an empty string.</p>

<p>template.nhtml:</p>

<pre>    &#123;: NES 1.0 (&#39;script.pl&#39;) :&#125;
    &#60;html&#62;
      &#60;head&#62;
        &#60;title&#62;Nes sample&#60;/title&#62;
      &#60;/head&#62;

      &#60;body&#62;
        &#60;b&#62;&#123;: $ var_name :&#125;&#60;/b&#62;
      &#60;/body&#62;
    &#60;/html&#62;</pre>

<p>script.pl:</p>

<pre>    use Nes;

    my $nes = Nes::Singleton-&#62;new(&#39;template.nhtml&#39;);
    my $nes_tags = {};

    $nes_tags-&#62;{&#39;var_name&#39;} = &#39;Hello!&#39;;

    $nes-&#62;out(%$nes_tags);</pre>

<h3><a name="*_Environment_variable" href="#___top" title="click to go to top of document" class="u">* Environment variable</a></h3>

<pre>    &#123;: * environment_variable :&#125;</pre>

<p>The block is replaced by the value of environment_variable which is an environment variable Nes.</p>

<p>Nes defined all CGI environment as:</p>

<pre>    &#123;: * env_SERVER_NAME :&#125; 
    &#123;: * env_DOCUMENT_ROOT :&#125; 
    etc...</pre>

<p>All parameters passed in the GET and POST methods, add &#39;q_&#39; at the beginning of the name of the variable:</p>

<pre>    &#123;: * q_varname :&#125;</pre>

<p>The varibles in the configuration file as:</p>

<pre>    &#123;: * cfg_varname :&#125;</pre>

<p>Other:</p>

<p>Current Directory:</p>

<pre>    &#123;: * nes_this_dir :&#125;</pre>

<p>Current file:</p>

<pre>    &#123;: * nes_this_file :&#125;</pre>

<p>NES version:</p>

<pre>    &#123;: * nes_ver :&#125;</pre>

<p>Language:</p>

<pre>    &#123;: * nes_accept_language :&#125;</pre>

<h3><a name="~_Expression" href="#___top" title="click to go to top of document" class="u">~ Expression</a></h3>

<pre>    &#123;: ~ (expression) HTML :&#125;</pre>

<p>The block is replaced by &#34;HTML&#34; if expression is true. Expression can be any valid Perl expression, including Perl regular expressions, the variable can only be a $ variable, environment *, or a literal:</p>

<pre>    &#123;: ~ ( $ variable =~ /hello/ ) &#60;p&#62;variable greets us&#60;/p&#62; :&#125;
    &#123;: ~ ( * variable ) &#60;p&#62;variable is defined&#60;/p&#62; :&#125;
    &#123;: ~ ( ! * variable ) &#60;p&#62;variable is not defined&#60;/p&#62; :&#125;</pre>

<p>The expressions that result in the assignment of a variable, return true or false but the assignment has no effect:</p>

<pre>    &#123;: ~ ( $ variable = 1 ) &#60;p&#62;value does not change&#60;/p&#62; :&#125;</pre>

<h3><a name="@_Data_table" href="#___top" title="click to go to top of document" class="u">@ Data table</a></h3>

<pre>    &#123;: @ (table) HTML :&#125;</pre>

<p>The block is replaced and is repeated by &#34;HTML&#34; as many times as records have Table. We refer to each field in each record with:</p>

<pre>    &#123;: @$ table.field :&#125;</pre>

<p>Table must be defined in our Perl script as an array of hashes reference.</p>

<p>In script.pl:</p>

<pre>    my $table = [ 
                  { 
                    name   =&#62; &#39;one&#39;,
                    email  =&#62; &#39;one@example.com&#39;,
                  },
                  { 
                    name   =&#62; &#39;two&#39;,
                    email  =&#62; &#39;two@example.com&#39;,
                  },
                  { 
                    name   =&#62; &#39;three&#39;,
                    email  =&#62; &#39;three@example.com&#39;,
                  }                                    
                ];

    $tag{&#39;users&#39;} = $table;</pre>

<p>In template.nhtml:</p>

<pre>    &#60;table&#62;
    &#123;: @ users
      &#60;tr&#62;
        &#60;td&#62; &#123;: @$ users.name  :&#125; &#60;/td&#62;

        &#60;td&#62; &#123;: @$ users.email :&#125; &#60;/td&#62;
      &#60;/tr&#62;
    :&#125;
    &#60;/table&#62;    </pre>

<h3><a name="@$_Field" href="#___top" title="click to go to top of document" class="u">@$ Field</a></h3>

<pre>    &#123;: @$ table.field :&#125;</pre>

<p>Where &#34;field&#34; is the name of the field in the table. &#123;: @$ table.field :&#125; is a property of &#123;: @ (table) HTML :&#125; or &#123;: sql (SQL SELECT) HTML :&#125;</p>

<h3><a name="sql_SQL_SELECT" href="#___top" title="click to go to top of document" class="u">sql SQL SELECT</a></h3>

<pre>    &#123;: sql (SQL SELECT) HTML :&#125;</pre>

<p>The block is replaced and is repeated by &#34;HTML&#34; for each record returned by the query. The operation is similar to Tag @. The SQL statement must begin with SELECT.</p>

<p>It reads the configuration (.nes.cfg) the following variables to access the database:</p>

<pre>    DB_base    = base_name
    DB_user    = user
    DB_pass    = password
    DB_driver  = mysql      
    DB_host    = localhost 
    DB_port    = 3306      </pre>

<p>Sample:</p>

<pre>    &#60;table&#62;
    &#123;: sql (
              &#39;SELECT * FROM `table` 
                        WHERE 1 
                        LIMIT 5;&#39;
           )
      &#60;tr&#62;
        &#60;td&#62; &#123;: @$ table.name  :&#125; &#60;/td&#62;

        &#60;td&#62; &#123;: @$ table.email :&#125; &#60;/td&#62;
      &#60;/tr&#62;
    :&#125;
    &#60;/table&#62;</pre>

<h3><a name="include_Include_a_file" href="#___top" title="click to go to top of document" class="u">include Include a file</a></h3>

<pre>    &#123;: include (&#39;file&#39;) :&#125;</pre>

<p>The block is replaced by the file &#34;file&#34;, file can be a nhtml, nsql, html, php, sh, text, perl, etc..</p>

<p>You can send parameters to the included file:</p>

<pre>    &#123;: include (&#39;file.nhtml&#39;,&#39;param&#39;, ... ) :&#125;</pre>

<p>These will be received in the file nHtml environment variables as:</p>

<pre>    q_filename_param_number
    
    &#123;: * q_file_param_1 :&#125;</pre>

<p>And in the Perl script with similar notation, excluding &#39;q_&#39; in the query:</p>

<pre>    use Nes;
    my $nes = Nes::Singleton-&#62;new(&#39;file.nhtml&#39;);
    
    my $q = $nes-&#62;{&#39;query&#39;}-&#62;{&#39;q&#39;};
    my $param = $q-&#62;{&#39;file_param_1&#39;};</pre>

<p>The included file inherits the parent tags</p>

<h3><a name="NES_Nes" href="#___top" title="click to go to top of document" class="u">NES Nes</a></h3>

<pre>    &#123;: NES ver (&#39;file&#39;) :&#125;</pre>

<p>It is similar to a line of files unix shell (#!/usr/bin/...) indicating that script must be run.</p>

<p>In the absence of this line is treated as HTML file (type text/html) without replacing any of Tags. If you do not need any Perl script but you want the file to be treated as replacement Tag Nes:</p>

<pre>    &#123;: NES 1.0 (&#39;&#39;) :&#125;</pre>

<p>Or explicitly stating &#39;none&#39; to avoid any suggestion that this is an error or oversight:</p>

<pre>    &#123;: NES 1.0 (&#39;none&#39;) :&#125;</pre>

<p>For clarity we recommend this:</p>

<pre>    &#123;: NES 1.0 none :&#125;</pre>

<h3><a name="&amp;_Plugin" href="#___top" title="click to go to top of document" class="u">&#38; Plugin</a></h3>

<pre>    &#123;: &#38; tag (param...) :&#125;</pre>

<p>Reserved for use by plugins.</p>

<h2><a name="Nes_Object" href="#___top" title="click to go to top of document" class="u">Nes Object</a></h2>

<p>Nes Objects are bits of code, NES, HTML, JavaScript, Perl... or a mixture. Any script can become an object Nes, so it is not necessary to rewrite the code.</p>

<pre>    .------------------------------------------------------------------------------------.
    |                                 | Nes Object |                                     |
    |                                 &#39;------------&#39;                                     |
    | .-----------------------------------.    .---------------------------------------. |
    | |          template.nhtml           |    |              script.pl                | |
    | |-----------------------------------|    |---------------------------------------| |
    | |                                   |---&#62;|                                       | |
    | |    &#123;: Nes 1.0 (&#39;script.pl&#39;) :&#125;    |    | Nes::Singleton-&#62;new(&#39;template.nhtml&#39;) | |
    | |                                   |&#60;---|                                       | |
    | &#39;-----------------------------------&#39;    &#39;---------------------------------------&#39; |
    &#39;------------------------------------------------------------------------------------&#39;</pre>

<p>The script can be a Perl script only, but &#39;template&#39; can be almost any non-binary file:</p>

<pre>    .----------------------------------------------.
    |                 | Nes Object |               |
    |                 &#39;------------&#39;               |
    | .-------------------.    .-----------------. |
    | |  template.js      |    |    script.pl    | |
    | |-------------------|    |-----------------| |
    | | (JavaScript)      |---&#62;|                 | |
    | |                   |&#60;---|                 | |
    | &#39;-------------------&#39;    &#39;-----------------&#39; |
    &#39;----------------------------------------------&#39;

    .----------------------------------------------.
    |                 | Nes Object |               |
    |                 &#39;------------&#39;               |
    | .-------------------.    .-----------------. |
    | |  template.php     |    |    script.pl    | |
    | |-------------------|    |-----------------| |
    | | (PHP)             |---&#62;|                 | |
    | |                   |&#60;---|                 | |
    | &#39;-------------------&#39;    &#39;-----------------&#39; |
    &#39;----------------------------------------------&#39;</pre>

<p>etc...</p>

<p>We call an object with include:</p>

<pre>    &#123;: include ( &#39;object.nhtml&#39;, [ parameter list ] ) :&#125;</pre>

<p>The objects may reside in any directory. A simple example is the object location.nhtml that redirects to another page:</p>

<pre>    &#123;: include ( &#39;&#123;: * cfg_obj_top_dir :&#125;/location.nhtml&#39;, 
                 &#39;http://example.com/page.nhtml&#39;,
                 &#39;301 Moved Permanently&#39;

               ) 
    :&#125;</pre>

<p>Nes Objects offers many opportunities for code reuse. Nes The idea is to have a huge library of objects, so you only have to write code for individual cases, disposing of objects commonly used for the login, sessions, etc.. work to create a Web with Nes will virtually mount templates and Web design.</p>

<h3><a name="Create_Object" href="#___top" title="click to go to top of document" class="u">Create Object</a></h3>

<p>With Nes can not create objects, you can invoke/include objects in your templates, but the object must be created in Perl, HTML, JavaScript, etc.. Or a mixture of all with a template Nes or not.</p>

<p>As an example we have encapsulated part of LWP in an Nes Object:</p>

<pre>    &#123;: include (&#39;&#123;: * cfg_obj_top_dir :&#125;/lwp.nhtml&#39;,
               URL,
               extrac,  &#123;: # default: content      |
                                      status       |
                                      Content-Type |
                                      title        |
                                      head         |
                                      body         |
                                      star:-:end   | 
                                      :-:star:-:end:-:
                         :&#125;
               method,   &#123;: # default: GET | POST :&#125;
               query,    &#123;: # query: &#39;name=Jose&#38;email=jose@sample.com&#39; :&#125;
               charset,  &#123;: # default: no change | ISO | UTF-8 :&#125;
               useragent &#123;: # default: Nes/0.8  :&#125;
               email     &#123;: # user agent email. default: $ENV{&#39;SERVER_ADMIN&#39;} :&#125;
             ) 
    :&#125;
    
    extrac:
    &#60;tag&#62;:-:&#60;/tag&#62;       Return tag content without tags: &#39;&#60;tag&#62;&#60;/tag&#62;&#39;

    :-:&#60;tag&#62;:-:&#60;/tag&#62;:-: Return tag content and include tags: &#39;&#60;tag&#62;&#60;/tag&#62;&#39;
    
    Defined:
    &#123;: $ status :&#125;        # Status response
    &#123;: $ request :&#125;       # request send
    &#123;: $ Content-Type :&#125;  # Content type
    &#123;: $ content :&#125;       # All HTML content
    &#123;: $ title :&#125;         # Title Tag content
    &#123;: $ head :&#125;          # Head Tag content
    &#123;: $ body :&#125;          # Body Tag content
    &#123;: $ extrac :&#125;        # extrac return value</pre>

<p>To test our object we have created a page test_page.html of which we can extract the &#34;Title&#34; as follows:</p>

<pre>    &#123;:  include (&#39;&#123;: * cfg_obj_top_dir :&#125;/lwp.nhtml&#39;,
                 &#39;http://nes.sourceforge.net/miniblog/es/test_page.html&#39;,
                 title
                ) 
    :&#125;</pre>

<p>Out:</p>

<pre>    Test Page - Sample to use Nes;</pre>

<p>We created our object so we can directly call the Perl script without the template nhtml:</p>

<pre>    &#123;:  include (&#39;&#123;: * cfg_obj_top_dir :&#125;/lwp.pl&#39;,
                 &#39;http://nes.sourceforge.net/miniblog/es/test_page.html&#39;,
                 title
                ) 
    :&#125;</pre>

<p>Out:</p>

<pre>    Test Page - Sample to use Nes;</pre>

<p>We may also create a new template for this Perl script. lwp.pl defines the following Nes Tags:</p>

<pre>    &#123;: $ status :&#125;        # Status response
    &#123;: $ request :&#125;       # request send
    &#123;: $ Content-Type :&#125;  # Content type
    &#123;: $ content :&#125;       # All HTML content
    &#123;: $ title :&#125;         # Title Tag content
    &#123;: $ head :&#125;          # Head Tag content
    &#123;: $ body :&#125;          # Body Tag content
    &#123;: $ extrac :&#125;        # extrac return value</pre>

<p>Then to create a small one-page report:</p>

<pre>    &#123;: NES 1.0 (&#39;./lwp.pl&#39;) :&#125;
    Status:&#60;br&#62;
    &#123;: $ status :&#125;&#60;br&#62;

    Title:&#60;br&#62;
    &#123;: $ title :&#125;&#60;br&#62;
    Content type:&#60;br&#62;
    &#123;: $ Content-Type :&#125;&#60;br&#62;
    Head:&#60;br&#62;

    &#123;: $ head :&#125;&#60;br&#62;
    Extrac:&#60;br&#62;
    &#123;: $ extrac,yes_html :&#125;</pre>

<p>Name as lwp_custom.nhtml, store it in the obj directory, and finally we can invoke like this:</p>

<pre>    &#123;: include (&#39;&#123;: * cfg_obj_top_dir :&#125;/lwp_custom.nhtml&#39;,
                &#39;http://nes.sourceforge.net/miniblog/es/test_page.html&#39;

                &#39;title&#39;
               ) 
    :&#125; </pre>

<p>Out:</p>

<pre>    Status:
    200 OK 
    Title:
    Test Page - Sample to use Nes;
    Content type:
    text/html
    Head:
    &#60;meta http-equiv=&#34;content-type&#34; content=&#34;text/html;charset=ISO-8859-1&#34; /&#62; 
    &#60;title&#62;Test Page - Sample to use Nes;&#60;/title&#62;

    Extrac:
    Test Page - Sample to use Nes;</pre>

<p>See: <a href="http://search.cpan.org/perldoc?Nes%3A%3AObj%3A%3Asecure_login" class="podlinkpod">Nes::Obj::secure_login</a>, <a href="http://search.cpan.org/perldoc?Nes%3A%3AObj%3A%3Amulti_step" class="podlinkpod">Nes::Obj::multi_step</a></p>

<h2><a name="HTTP-headers" href="#___top" title="click to go to top of document" class="u">HTTP-headers</a></h2>

<p>With the HTTP-headers variable we have to define in our Perl script:</p>

<pre>    use Nes;
    my $nes      = Nes::Singleton-&#62;new(&#39;template.nhtml&#39;);
    my $nes_tags = {};

    $nes_tags-&#62;{&#39;HTTP-headers&#39;} = &#34;Content-type: text/html\n\n&#34;;

    $nes-&#62;out(%$nes_tags);</pre>

<p>We can control the headers of the HTML output.</p>

<p>When Nes verifies that HTTP-headers has value, prints its content and not the headers by default. Should be included immediately after the NES Tag:</p>

<pre>    &#123;: NES 1.0 (&#39;file.pl&#39;) :&#125;
    &#123;: $ HTTP-headers :&#125;</pre>

<p>If you define HTTP-headers and then not included with &#123;: $ HTTP-headers :&#125; we get an error. * This is not required from version 1.03.</p>

<p>You can use any module of CPAN to create the HTTP headers. The difference is that you can not send them directly to the output, assign it to the variable {&#39;HTTP-headers&#39;}</p>

<pre>    use Nes;
    use CGI &#39;:standard&#39;;

    my $nes  = Nes::Singleton-&#62;new(&#39;template.nhtml&#39;);
    my $cgi  = CGI-&#62;new();
    my %tags = {};

    print $cgi-&#62;header(&#39;text/html&#39;);                      &#60;- It will not work
    $tags-&#62;{&#39;HTTP-headers&#39;} = $cgi-&#62;header(&#39;text/html&#39;);  &#60;- Ok

    $nes-&#62;out(%tags);</pre>

<h2><a name="Security" href="#___top" title="click to go to top of document" class="u">Security</a></h2>

<h3><a name="Code_Injection_and_Cross-site_scripting" href="#___top" title="click to go to top of document" class="u">Code Injection and Cross-site scripting</a></h3>

<p>Nes transparently manages the removal of malicious code variables.</p>

<p>By default is filtered HTML and the tags Nes all environment variables (*) from forms.</p>

<p>By default is filtered HTML and the tags of all the variables Nes ($).</p>

<p>By default is filtered HTML and the tags Nes all the variables of Tables and SQL (@$).</p>

<p>By default HTML is allowed &#60;br&#62; HTML Tag.</p>

<p>By default, calls DBI::quote on all variables that are part of a SELECT statement in sql Tag</p>

<h3><a name="Change_the_default_behavior" href="#___top" title="click to go to top of document" class="u">Change the default behavior</a></h3>

<p>The types of variables x, $ y @$ accept parameters to change this behavior:</p>

<pre>    &#123;: $  (&#39;var&#39;,&#39;yes_html&#39;,&#39;no_sql&#39;) :&#125;
    &#123;: *  (&#39;q_var&#39;,&#39;yes_html&#39;,&#39;no_sql&#39;) :&#125;
    &#123;: @$ (&#39;table.field&#39;,&#39;yes_html&#39;,&#39;no_sql&#39;) :&#125;</pre>

<p>We passed as parameters the filtering options you want, and are:</p>

<pre>    no_sql   # not allow SQL, call DBI::quote
    no_html  # not allow Tag HTML
    no_br    # not allow Tag HTML &#60;br&#62;
    no_nes   # not allow Tag Nes &#123;: :&#125;
    yes_sql  # allow SQL, not DBI::quote filter 
    yes_html # allow all Tags HTML
    yes_br   # allow Tag HTML &#60;br&#62;
    yes_nes  # allow Tag Nes &#123;: :&#125;</pre>

<p>Allow specific HTML tags ( yes_tag_TAG ):</p>

<pre>    yes_tag_B      # allow Tag HTML &#60;B&#62;&#60;/B&#62;
    yes_tag_STRONG # allow Tag HTML &#60;strong&#62;&#60;/strong&#62;
    ...</pre>

<p>Format:</p>

<pre>    &#123;: $  (&#39;var&#39;,[list of options in any order]) :&#125;</pre>

<h3><a name="Nes_Tags" href="#___top" title="click to go to top of document" class="u">Nes Tags</a></h3>

<p>If we make a variable &#39;yes_nes&#39; will not get run code that contains the variable. For safety, you can not execute code from a Nes variable. The effect of &#39;no_nes&#39; is that the tags are visible, and &#39;yes_nes&#39; is disappearing.</p>

<h3><a name=".nes.cfg" href="#___top" title="click to go to top of document" class="u">.nes.cfg</a></h3>

<p>We must prevent access to these files in .htaccess:</p>

<pre>     &#60;FilesMatch \.nes.cfg$&#62;
        order deny,allow
        deny from all
     &#60;/FilesMatch&#62;</pre>

<h3><a name="PHP" href="#___top" title="click to go to top of document" class="u">PHP</a></h3>

<p>Nes filters the Nes Tags of the forms in PHP include or Wrapper, but NOT the HTML and SQL. It is assumed that the PHP script should incorporate these filters.</p>

<h2><a name="Sessions" href="#___top" title="click to go to top of document" class="u">Sessions</a></h2>

<p>We can managing user sessions with Objects or Perl script.</p>

<h3><a name="Object_session.nhtml" href="#___top" title="click to go to top of document" class="u">Object session.nhtml</a></h3>

<p>Managing user sessions with the object session.nhtml:</p>

<pre>  &#123;: include ( &#39;&#123;: * cfg_obj_top_dir :&#125;/session.nhtml&#39;,
               action,  &#123;: # default: get | create | del :&#125;
               user,    &#123;: # if &#39;get&#39; action: user :&#125;
               expire   &#123;: # if &#39;get&#39; action: expire :&#125;
  :&#125;

  Expire format:
    time suffix: s: seconds, m: minutes h: hours d: days, M: months, y: years
    30s = 30 seconds
    12h = 12 hours
    2y  = 2 years
    ...</pre>

<h3><a name="Sessions_in_Perl_script" href="#___top" title="click to go to top of document" class="u">Sessions in Perl script</a></h3>

<p>See: <a href="http://search.cpan.org/perldoc?Nes%3A%3ASingleton" class="podlinkpod">Nes::Singleton</a></p>

<h3><a name="Nes_Environment_Variables" href="#___top" title="click to go to top of document" class="u">Nes Environment Variables</a></h3>

<pre>    # Session is open
    &#123;: * nes_session_ok :&#125;
    
    # User name session
    &#123;: * nes_session_user :&#125;</pre>

<hr />

